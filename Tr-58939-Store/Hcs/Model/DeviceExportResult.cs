// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace Hcs.Model
{
    public partial class DeviceExportResult
    {
        public DeviceExportResult()
        {
            DeviceExportResultAccounts = new HashSet<DeviceExportResultAccount>();
            DeviceExportResultAddresses = new HashSet<DeviceExportResultAddress>();
        }

        public long uniqueId { get; set; }
        public Guid TransactionGUID { get; set; }
        [Key]
        public Guid TransportGUID { get; set; }
        public Guid DeviceGUID { get; set; }
        public Guid DeviceVersionGUID { get; set; }
        [Required]
        [StringLength(32)]
        public string StatusRootDoc { get; set; }
        public byte deviceType { get; set; }
        public byte? individualDeviceType { get; set; }
        [Required]
        [StringLength(50)]
        public string DeviceNumber { get; set; }
        [StringLength(100)]
        public string DeviceStamp { get; set; }
        [StringLength(100)]
        public string DeviceModel { get; set; }
        [Column(TypeName = "datetime")]
        public DateTime? InstallationDate { get; set; }
        [Column(TypeName = "datetime")]
        public DateTime? CommissioningDate { get; set; }
        public bool RemoteMeteringMode { get; set; }
        [StringLength(2000)]
        public string RemoteMeteringInfo { get; set; }
        [Column(TypeName = "datetime")]
        public DateTime? FirstVerificationDate { get; set; }
        [StringLength(20)]
        public string DeviceCalibrationIntervalCode { get; set; }
        public Guid? DeviceCalibrationIntervalGUID { get; set; }
        [Column(TypeName = "datetime")]
        public DateTime? FactorySealDate { get; set; }
        public bool TemperatureSensor { get; set; }
        public bool PressureSensor { get; set; }
        public bool? ConsumedVolume { get; set; }

        [InverseProperty(nameof(DeviceExportResultAccount.DeviceExportTransportGU))]
        public virtual ICollection<DeviceExportResultAccount> DeviceExportResultAccounts { get; set; }
        [InverseProperty(nameof(DeviceExportResultAddress.DeviceExportTransportGU))]
        public virtual ICollection<DeviceExportResultAddress> DeviceExportResultAddresses { get; set; }
    }
}